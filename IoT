/*
   WebSocketClientSocketIO.ino

    Created on: 06.06.2016

    6A A0 9E 1A = M Wahyudi Harlianto


*/

#include <Arduino.h>
#include <ESP8266WiFi.h>
#include <ESP8266WiFiMulti.h>   // Include the Wi-Fi-Multi library
#include <Arduino.h>
#include <ArduinoJson.h>
#include <WebSocketsClient.h>
#include <SocketIOclient.h>
#include <HardwareSerial.h>
#include <Adafruit_GFX.h>    // Core graphics library
#include <Adafruit_ST7735.h> // Hardware-specific library for ST7735
#include <Adafruit_ST7789.h> // Hardware-specific library for ST7789
#include <SPI.h>
#include <MFRC522.h>
#include <ESP8266WiFi.h>
#include <ESP8266WiFiMulti.h>
#include <Hash.h>
#include <ESP8266HTTPClient.h>

HTTPClient http;
bool wifiloged = false;
const char* WIFI_SSID = "SSS";
const char* WIFI_PASS = "Kawarizmi06";
const char* NIM = "muhamamad.119130128";
const char* PASS = "Kawarizmi06";
WiFiClient client;

ESP8266WiFiMulti WiFiMulti;
WebSocketsClient webSocket;

#define RST_PIN         5          // Configurable, see typical pin layout above
#define SS_PIN          15         // Configurable, see typical pin layout above
#define USE_SERIAL Serial

int RelayPin = 4;

MFRC522 mfrc522(SS_PIN, RST_PIN);
String tappedCodeTag = "";

void webSocketEvent(WStype_t type, uint8_t * payload, size_t length) {
    switch(type) {
        case WStype_DISCONNECTED:
            USE_SERIAL.printf("[WSc] Disconnected!\n");
            break;
        case WStype_CONNECTED:
            {
                USE_SERIAL.printf("[WSc] Connected to url: %s\n",  payload);
        
          // send message to server when Connected
        //webSocket.sendTXT("Connected");
            }
            break;
        case WStype_TEXT:
            USE_SERIAL.printf("[WSc] get text: %s\n", payload);

      // send message to server
      // webSocket.sendTXT("message here");
            break;
        case WStype_BIN:
            USE_SERIAL.printf("[WSc] get binary length: %u\n", length);
            hexdump(payload, length);

            // send data to server
            // webSocket.sendBIN(payload, length);
            break;
    }

}

void setup() {
  // USE_SERIAL.begin(9600);
  USE_SERIAL.begin(9600);

  //Serial.setDebugOutput(true);
  USE_SERIAL.setDebugOutput(true);

  USE_SERIAL.println();
  USE_SERIAL.println();
  USE_SERIAL.println();

  pinMode(RelayPin, OUTPUT);
  SPI.begin();
  mfrc522.PCD_Init();
  digitalWrite(RelayPin, LOW);

  for (uint8_t t = 4; t > 0; t--) {
    USE_SERIAL.printf("[SETUP] BOOT WAIT %d...\n", t);
    USE_SERIAL.flush();
    delay(1000);
  }

  // disable AP
  if (WiFi.getMode() & WIFI_AP) {
    WiFi.softAPdisconnect(true);
  }

  WiFiMulti.addAP("SSS", "Kawarizmi");

  //WiFi.disconnect();
  while (WiFiMulti.run() != WL_CONNECTED) {
    delay(100);
  }

  loginwifi();

  String ip = WiFi.localIP().toString();
  USE_SERIAL.printf("[SETUP] WiFi Connected %s\n", ip.c_str());

  // server address, port and URL
  webSocket.begin("el.itera.ac.id", 80, "/absen-c103/socket.io/?EIO=4");

  // event handler
  webSocket.onEvent(webSocketEvent);

}

unsigned long messageTimestamp = 0;
void loop() {
  webSocket.loop();

  uint64_t now = millis();
  
  if (now - messageTimestamp > 100) {
    messageTimestamp = now;
    if (tappedCodeTag != "NULL") {

      // creat JSON message for Socket.IO (event)
      DynamicJsonDocument doc(1024);
      JsonArray array = doc.to<JsonArray>();

      // add evnet name
      // Hint: socket.on('event_name', ....
      array.add("absen");

      // add payload (parameters) for the event
      JsonObject param1 = array.createNestedObject();

      //String PP=tappedCodeTag;

      param1["code_tag"] = tappedCodeTag;

      // JSON to String (serializion)
      String output;
      serializeJson(doc, output);

      // Send event
      webSocket.sendTXT(output);

      // Print JSON for debugging
      USE_SERIAL.println(output);

      Serial.println("before");
      Serial.println(tappedCodeTag);
      Serial.println(tappedCodeTag.length());
      tappedCodeTag = "NULL";
      Serial.println("after");
      Serial.println(tappedCodeTag);
      Serial.println(tappedCodeTag.length());
    }
  }

  if ( ! mfrc522.PICC_IsNewCardPresent())
  {
    return;
  }

  if ( ! mfrc522.PICC_ReadCardSerial())
  {
    return;
  }

  USE_SERIAL.print("UID tag :");
  String content = "";
  byte letter;
  for (byte i = 0; i < mfrc522.uid.size; i++)
  {
    USE_SERIAL.print(mfrc522.uid.uidByte[i] < 0x10 ? " 0" : " ");
    USE_SERIAL.print(mfrc522.uid.uidByte[i], HEX);
    content.concat(String(mfrc522.uid.uidByte[i] < 0x10 ? " 0" : " "));
    content.concat(String(mfrc522.uid.uidByte[i], HEX));
  }
  USE_SERIAL.println();
  USE_SERIAL.print("Message : ");
  content.toUpperCase();

  if (content.substring(1) == "43 D4 CA 1B" || content.substring(1) == "A4 B9 23 07" || content.substring(1) == "6A A0 9E 1A") { //change here the UID of the card/cards that you want to give access{
    USE_SERIAL.println("Authorized access");
    USE_SERIAL.println();
    digitalWrite(RelayPin, HIGH);
    USE_SERIAL.println("HALLO");
    delay(1000);
    digitalWrite(RelayPin, LOW);
    USE_SERIAL.println("Terimkasih sudah berkunjung");
    tappedCodeTag = content.substring(1);
    
  }
  else {
    USE_SERIAL.println(" Access denied");
    digitalWrite(RelayPin, LOW);
    USE_SERIAL.println("Mati");
    delay(1000);
  }
}

void loginwifi() {
  http.begin(client, "http://hotspot.itera.ac.id/login.html");
  http.addHeader("Content-Type", "application/x-www-form-urlencoded");
  String kirim = "username=muhamad.119130128&password=Kawarizmi06";
  /*
  kirim += NIM;
  kirim += "&pwd=";
  kirim += PASS;
  kirim += "&rememberPwd=1";
  */
  int httpCode = http.POST(kirim);
  USE_SERIAL.println(httpCode);
  if (httpCode > 0) {
    Serial.println(http.getString());
    wifiloged = true;
  }
  USE_SERIAL.println("Wifi Logged");
}
